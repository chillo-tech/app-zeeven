on:
  push:
    branches:
      - feature/*
      - develop
  workflow_dispatch:

env:
  NODE_VERSION: '14.x'
  APPLICATION_NAME: 'zeeven'
  APPLICATION_TYPE: 'app'

permissions:
  contents: read

jobs:
  create-prod-folder:
    name: create prod folder
    runs-on: ubuntu-latest
    if: ${{ github.base_ref == 'master' || github.ref == 'refs/heads/master' }}
    environment:
      name: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Create prod folder
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.APPLICATIONS_HOST }}
          port: ${{ secrets.APPLICATIONS_PORT }}
          username: ${{ secrets.APPLICATIONS_USERNAME }}
          key: ${{ secrets.APPLICATIONS_SSH_PRIVATE_KEY }}
          script: |
            sudo mkdir -p /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}
            sudo chmod ugo+rwx /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}

      - name: update configs
        run: |
          sed -i 's|IMAGE_NAME|simachille/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}:${{ github.sha }}|' docker-compose.yml

      - name: copy docker compose
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.APPLICATIONS_HOST }}
          port: ${{ secrets.APPLICATIONS_PORT }}
          username: ${{ secrets.APPLICATIONS_USERNAME }}
          key: ${{ secrets.APPLICATIONS_SSH_PRIVATE_KEY }}
          source: 'docker-compose.yml'
          target: '/opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}'

  create-staging-folder:
    runs-on: ubuntu-latest
    if: ${{ !(github.base_ref == 'master' || github.ref == 'refs/heads/master') }}
    environment:
      name: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Create staging folder
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.APPLICATIONS_HOST }}
          port: ${{ secrets.APPLICATIONS_PORT }}
          username: ${{ secrets.APPLICATIONS_USERNAME }}
          key: ${{ secrets.APPLICATIONS_SSH_PRIVATE_KEY }}
          script: |
            sudo mkdir -p /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}
            sudo chmod ugo+rwx /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}

      - name: update configs
        run: |
          sed -i 's|IMAGE_NAME|simachille/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}:${{ github.sha }}|' docker-compose.yml

      - name: copy docker compose
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.APPLICATIONS_HOST }}
          port: ${{ secrets.APPLICATIONS_PORT }}
          username: ${{ secrets.APPLICATIONS_USERNAME }}
          key: ${{ secrets.APPLICATIONS_SSH_PRIVATE_KEY }}
          source: 'docker-compose.yml'
          target: '/opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}'

  dockerize:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: simachille/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}:latest
  
  run-prod-container:
    name: 'Run prod container'
    runs-on: ubuntu-latest
    needs: [dockerize, create-prod-folder]
    if: ${{ (github.base_ref == 'master' || github.ref == 'refs/heads/master') }}
    environment:
      name: production
    steps:
      - name: Run container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.APPLICATIONS_HOST }}
          port: ${{ secrets.APPLICATIONS_PORT }}
          username: ${{ secrets.APPLICATIONS_USERNAME }}
          key: ${{ secrets.APPLICATIONS_SSH_PRIVATE_KEY }}
          script: |
            echo API_URL=${{ secrets.API_URL }} > /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo APPLICATION_URL=${{ secrets.APPLICATION_URL }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo BACKOFFICE_API=${{ secrets.BACKOFFICE_API }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo BACKOFFICE_API_TOKEN=${{ secrets.BACKOFFICE_API_TOKEN }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
    
            echo GOOGLE_ID=${{ secrets.GOOGLE_ID }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo GOOGLE_SECRET=${{ secrets.GOOGLE_SECRET }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
    
            echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
    
            echo NEXT_PUBLIC_API_KEY=${{ secrets.NEXT_PUBLIC_API_KEY }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo NEXT_PUBLIC_ASSETS_ENDPOINT=${{ secrets.NEXT_PUBLIC_ASSETS_ENDPOINT }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo NEXT_PUBLIC_CLIENT_ID=${{ secrets.NEXT_PUBLIC_CLIENT_ID }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo NEXT_PUBLIC_DISCOVERY_DOC=${{ secrets.NEXT_PUBLIC_DISCOVERY_DOC }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo NEXT_PUBLIC_GOOGLE_ANALYTICS=${{ secrets.NEXT_PUBLIC_GOOGLE_ANALYTICS }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo NEXT_PUBLIC_GOOGLE_MAP_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAP_API_KEY }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo NEXT_PUBLIC_SCOPES=${{ secrets.NEXT_PUBLIC_SCOPES }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo NEXT_PUBLIC_SECRET=${{ secrets.NEXT_PUBLIC_SECRET }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
    
            echo NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo NEXTAUTH_URL_INTERNAL=${{ secrets.NEXTAUTH_URL_INTERNAL }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
    
            echo SERVICE_ID=${{ secrets.SERVICE_ID }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo SERVICE_KEY=${{ secrets.SERVICE_KEY }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            docker compose -f /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/docker-compose.yml stop
            docker compose -f /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/docker-compose.yml rm -f
            docker rmi simachille/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}:latest
            sudo docker compose -f /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/docker-compose.yml up -d
    
  run-staging-container:
    name: 'Run staging container'
    runs-on: ubuntu-latest
    needs: [dockerize, create-staging-folder]
    if: ${{ !(github.base_ref == 'master' || github.ref == 'refs/heads/master') }}
    environment:
      name: staging
    steps:
      - name: Run container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.APPLICATIONS_HOST }}
          port: ${{ secrets.APPLICATIONS_PORT }}
          username: ${{ secrets.APPLICATIONS_USERNAME }}
          key: ${{ secrets.APPLICATIONS_SSH_PRIVATE_KEY }}
          script: |
            echo API_URL=${{ secrets.API_URL }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo APPLICATION_URL=${{ secrets.APPLICATION_URL }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo BACKOFFICE_API=${{ secrets.BACKOFFICE_API }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo BACKOFFICE_API_TOKEN=${{ secrets.BACKOFFICE_API_TOKEN }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
    
            echo GOOGLE_ID=${{ secrets.GOOGLE_ID }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo GOOGLE_SECRET=${{ secrets.GOOGLE_SECRET }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
    
            echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
    
            echo NEXT_PUBLIC_API_KEY=${{ secrets.NEXT_PUBLIC_API_KEY }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo NEXT_PUBLIC_ASSETS_ENDPOINT=${{ secrets.NEXT_PUBLIC_ASSETS_ENDPOINT }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo NEXT_PUBLIC_CLIENT_ID=${{ secrets.NEXT_PUBLIC_CLIENT_ID }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo NEXT_PUBLIC_DISCOVERY_DOC=${{ secrets.NEXT_PUBLIC_DISCOVERY_DOC }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo NEXT_PUBLIC_GOOGLE_ANALYTICS=${{ secrets.NEXT_PUBLIC_GOOGLE_ANALYTICS }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo BACKOFFICE_API_TOKEN=${{ secrets.BACKOFFICE_API_TOKEN }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env

            echo NEXT_PUBLIC_GOOGLE_MAP_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAP_API_KEY }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo NEXT_PUBLIC_SCOPES=${{ secrets.NEXT_PUBLIC_SCOPES }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo NEXT_PUBLIC_SECRET=${{ secrets.NEXT_PUBLIC_SECRET }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
    
            echo NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo NEXTAUTH_URL_INTERNAL=${{ secrets.NEXTAUTH_URL_INTERNAL }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
    
            echo SERVICE_ID=${{ secrets.SERVICE_ID }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
            echo SERVICE_KEY=${{ secrets.SERVICE_KEY }} >> /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/.env
  
            docker compose -f /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/docker-compose.yml stop
            docker compose -f /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/docker-compose.yml rm -f
            docker rmi simachille/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}:latest
            sudo docker compose -f /opt/applications/${{env.APPLICATION_NAME}}/${{env.APPLICATION_TYPE}}-${{env.APPLICATION_NAME}}/docker-compose.yml up -d
